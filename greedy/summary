https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/
https://leetcode.com/problems/monotone-increasing-digits/
https://leetcode.com/problems/advantage-shuffle/
https://leetcode.com/problems/boats-to-save-people/
https://leetcode.com/problems/car-pooling/
https://leetcode.com/problems/queue-reconstruction-by-height/
https://leetcode.com/problems/score-after-flipping-matrix/
https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/
https://leetcode.com/problems/partition-labels/
https://leetcode.com/problems/couples-holding-hands/
https://leetcode.com/problems/jump-game-ii/
https://leetcode.com/problems/candy/
https://leetcode.com/problems/remove-duplicate-letters/
https://leetcode.com/problems/patching-array/


贪婪算法(Greedy algorithm)是一种对某些求最优解问题的更简单、更迅速的设计技术。
用贪婪法设计算法的特点是一步一步地进行，常以当前情况为基础根据某个优化测度作最优选择，而不考虑各种可能的整体情况，
它省去了为找最优解要穷尽所有可能而必须耗费的大量时间。

它采用自顶向下，以迭代的方法做出相继的贪心选择，
每做一次贪心选择就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解，
虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪婪法不要回溯.

贪婪算法是一种改进了的分级处理方法。
其核心是根据题意选取一种量度标准。然后将这多个输入排成这种量度标准所要求的顺序，
按这种顺序一次输入一个量。

如果这个输入和当前已构成在这种量度意义下的部分最佳解加在一起不能产生一个可行解，则不把此输入加到这部分解中。
这种能够得到某种量度意义下最优解的分级处理方法称为贪婪算法。
对于一个给定的问题，往往可能有好几种量度标准。初看起来，这些量度标准似乎都是可取的，
但实际上，用其中的大多数量度标准作贪婪处理所得到该量度意义下的最优解并不是问题的最优解，而是次优解。

因此，选择能产生问题最优解的最优量度标准是使用贪婪算法的核心。

一般情况下，要选出最优量度标准并不是一件容易的事，但对某问题能选择出最优量度标准后，用贪婪算法求解则特别有效。
最优解可以通过一系列局部最优的选择即贪婪选择来达到，根据当前状态做出在当前看来是最好的选择，即局部最优解选择，
然后再去解做出这个选择后产生的相应的子问题。每做一次贪婪选择就将所求问题简化为一个规模更小的子问题，
最终可得到问题的一个整体最优解